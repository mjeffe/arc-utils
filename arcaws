#!/bin/bash
# ------------------------------------------------------------------------
# A script that simplifies and provides some convenience to a few of the
# command line tasks I use daily with AWS, such as stopping/startting instances
# by name, etc.
# 
# Some of these functions assume our AWS config, which is a single bastion
# server is the only access to all instances via ssh's ProxyCommand option
# and ssh keys.
# ------------------------------------------------------------------------

this=`basename $0`
# set this based on current bastion server's security group id
BASTION_SECURITY_GROUP_ID=

# locate and source common arc functions
funcs=$(dirname $(realpath $0))/arc_functions.sh
if [ ! -f "$funcs" ]; then
    echo ERROR: Unable to locate arc_functions.sh
    echo
    echo arc_functions.sh live in the same git project and directory as this script.
    exit 1
fi
source $funcs

# ------------------------------------------------------------------------
start_instance() {
    while [ -n "$1" ]; do
        local id=`get_id $1`
        echo "Starting ${1} (${id}) at `date`..."
        echo "Checking if instance is stopped (will wait if not)"
        aws ec2 wait instance-stopped --instance-ids $id
        echo "Starting instance"
        aws ec2 start-instances --instance-ids $id
        shift
    done
}

# ------------------------------------------------------------------------
stop_instance() {
    while [ -n "$1" ]; do
        local id=`get_id $1`
        echo "Stopping ${1} (${id}) at `date`..."
        aws ec2 stop-instances --instance-ids $id
        shift
    done
}

# ------------------------------------------------------------------------
list_instances() {
    aws ec2 describe-instances --query "Reservations[*].Instances[*].{ip:PublicIpAddress,type:InstanceType,id:InstanceId,Name:Tags[?Key=='Name']|[0].Value,status:State.Name} | sort_by([], &Name)" --filters Name=instance-state-name,Values='*' --output table
}

# ------------------------------------------------------------------------
lookup_instance_id() {
    local name="${1}"
    aws ec2 describe-instances --query "Reservations[*].Instances[*].{id:InstanceId,Name:Tags[?Key=='Name']|[0].Value}" --output text \
       | grep "^${name}[[:space:]]" | cut -f 2
}

# ------------------------------------------------------------------------
get_id() {
    local id=$1
    # if we were passed something other than an instance id, we need to look it up
    if [ ${id:0:2} != 'i-' ]; then
        id=`lookup_instance_id $id`
    fi
    
    echo $id
}

# ------------------------------------------------------------------------
add_bastion_ip() {
    local ipv4="$1"
    local desc="$2"
    if [ -z "$desc" ]; then
        desc="ip added by `whoami`"
    fi

    aws ec2 authorize-security-group-ingress --group-id $BASTION_SECURITY_GROUP_ID \
        --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,IpRanges="[{CidrIp=${ipv4}/32,Description='${desc}'}]"
}

# ------------------------------------------------------------------------
rm_bastion_ip() {
    local ipv4="$1"
    aws ec2 revoke-security-group-ingress --group-id $BASTION_SECURITY_GROUP_ID \
        --protocol tcp --port 22 --cidr ${ipv4}/32
}

# ------------------------------------------------------------------------
list_bastion_rules() {
    aws ec2 describe-security-groups --group-id $BASTION_SECURITY_GROUP_ID
}

# ------------------------------------------------------------------------
# check currently running servers to see if they need any updates
check_for_updates() {
    local DIR=~/tmp/server-update-check

    # setup
    rm -fr $DIR
    mkdir $DIR

    # list running hosts
    local HOSTS=$(list_instances | grep running | awk '{print $2}')

    echo "Running hosts I can check:"
    echo "$HOSTS"
    pssh -t 5 -o $DIR -H "$HOSTS" 'uname -n; yum check-update > /dev/null; echo $?'

    check_for_updates_report "$HOSTS"

    rm -fr $DIR
}

# ------------------------------------------------------------------------
# report on the output of check_for_updates()
# Note, the whole pssh can be a little janky, so output can reflect that
check_for_updates_report() {
    local $HOSTS="$1"
    for host in $HOSTS; do
        echo -n "$host : "

        if [ ! -f $DIR/$host ]; then
            _say_comment -n "Unable to connect"
            continue
        fi

        rc=$(tail -1 $DIR/$host)
        if [ "$rc" != '0' ]; then
            _say_danger -n "May need to update ($rc)"
        else
            _say_success -n "Up to date ($rc)"
        fi
    done
}

# ------------------------------------------------------------------------
usage() {
     echo "
Description:
    this is a simple controller for managing ARC AWS resources

Usage:
    # start, stop, or restart an instance by name or by instance id
    $this start|restart|stop <name|instance-id>

    # list all instances
    $this list

    # lookup the instance-id by name
    $this id <name>

    # add an ip address to the bastion server security group inbound rules
    ip-add <ipv4> <comment>

    # add an ip address to the bastion server security group inbound rules
    ip-rm <ipv4>

    # list bastion server security group rules
    ip-list

    # check to see if any running servers need updates
    update-check
    "
}

# check if we're configured
if [ -z "$BASTION_SECURITY_GROUP_ID" ]; then
    echo 'BASTION_SECURITY_GROUP_ID has not been set'
    echo "Edit this script to set it, or remove this check if you don't need it"
    exit 1
fi

# see how we were called
case "$1" in
    start)
        shift
        start_instance "$@"
        ;;
    stop)
        shift
        stop_instance "$@"
        ;;
    restart)
        shift
        stop_instance "$@"
        start_instance "$@"
        ;;
    list)
        list_instances
        ;;
    id)
        shift
        lookup_instance_id "$@"
        ;;
    ip-add)
        shift
        add_bastion_ip "$@"
        ;;
    ip-rm)
        shift
        rm_bastion_ip "$@"
        ;;
    ip-list)
        shift
        list_bastion_rules
        ;;
    update-check)
        shift
        check_for_updates
        ;;
    *)
        usage
        ;;
esac

